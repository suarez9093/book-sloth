{"version":3,"sources":["components/Cards/Card/index.js","components/Cards/index.js","components/Header/index.js","App.js","components/context/index.js","serviceWorker.js","index.js"],"names":["Card","message","first_name","last_name","photo","replies","users","likes","id","console","log","useState","isHidden","setIsHidden","like","setLike","className","src","alt","onClick","e","heart","target","style","color","fontSize","prevState","replyContainer","parentNode","nextSibling","maxHeight","scrollHeight","Cards","map","user","key","email","Header","href","App","context","React","createContext","ContextProvider","children","setUsers","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.06145d5b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./card.css\";\n\nfunction Card({\n  message,\n  first_name,\n  last_name,\n  photo,\n  users,\n  replies,\n  id,\n  likes,\n}) {\n  console.log(replies);\n  const [isHidden, setIsHidden] = useState(true);\n  const [like, setLike] = useState(likes);\n  const [isLiked, setIsLiked] = useState(false);\n\n  console.log(like);\n  function toggleReplies(e) {\n    const button = e.target;\n    const cardResContainer = button.parentNode;\n    const card = cardResContainer.parentNode;\n    const replyContainer = card.nextSibling;\n    if (replyContainer.style.maxHeight) {\n      replyContainer.style.maxHeight = null;\n    } else {\n      replyContainer.style.maxHeight = replyContainer.scrollHeight + \"px\";\n    }\n    setIsHidden((prevState) => !prevState);\n  }\n\n  function toggleLike(e) {\n    const heart = e.target;\n    if (heart.style.color === \"\") {\n      heart.style.color = \"red\";\n      heart.style.fontSize = \"1.25em\";\n      setLike((prevState) => prevState + 1);\n    } else {\n      heart.style.color = \"\";\n      heart.style.fontSize = \"1em\";\n      setLike((prevState) => prevState - 1);\n    }\n  }\n\n  return (\n    <>\n      <div className=\"card-container\">\n        <div className=\"card\">\n          <img className=\"card-img\" src={photo} alt=\"user profile\" />\n          <div className=\"card-main\">\n            <p className=\"card-user\">\n              {first_name} {last_name}\n            </p>\n            <p className=\"card-message\">{message}</p>\n            <div className=\"interact-icons\">\n              <div className=\"interact-icon\">\n                <span>\n                  <i className=\"fas fa-share share-icon\"></i> 12\n                </span>\n              </div>\n              <div className=\"interact-icon\">\n                <span>\n                  <i onClick={toggleLike} className=\"fas fa-heart\"></i> {like}\n                </span>\n              </div>\n              <div className=\"interact-icon\">\n                <i className=\"fas fa-share-alt\"></i>\n              </div>\n            </div>\n          </div>\n          <div className=\"card-response-container\">\n            <button onClick={toggleReplies} className=\"card-btn\">\n              12 min\n              {isHidden && (\n                <i className=\"fas fa-greater-than card-btn-icon\"></i>\n              )}\n              {!isHidden && (\n                <i className=\"fas fa-greater-than card-btn-rotate\"></i>\n              )}\n            </button>\n            <div className=\"card-tag\">Ask</div>\n          </div>\n        </div>\n        {/* {!isHidden && (\n          <div className=\"reply-container\">\n            <div className=\"card\">\n              <img\n                className=\"card-img\"\n                src={users.replies[0].photo}\n                alt=\"user photo\"\n              />\n              <div className=\"card-main\">\n                <p className=\"card-user\">\n                  {users.replies[0].first_name} {users.replies[0].last_name}\n                </p>\n                <p className=\"card-message\">{users.replies[0].message}</p>\n              </div>\n              <div className=\"card-response-container\">\n                <span className=\"card-btn-text\">4 hr</span>\n              </div>\n            </div>\n          </div>\n        )} */}\n        {/* {!isHidden && ( */}\n        <div className=\"reply-container\">\n          <div className=\"card\">\n            <img className=\"card-img\" src={replies[0].photo} alt=\"user\" />\n            <div className=\"card-main\">\n              <p className=\"card-user\">\n                {replies[0].first_name} {replies[0].last_name}\n              </p>\n              <p className=\"card-message\">{replies[0].message}</p>\n            </div>\n            <div className=\"card-response-container\">\n              <span className=\"card-btn-text\">4 hr</span>\n            </div>\n          </div>\n        </div>\n        {/* )} */}\n      </div>\n    </>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\n// import React, { useEffect, useContext } from \"react\";\nimport Card from \"./Card\";\nimport \"./cards.css\";\n// import { context } from \"../context/index\";\nimport users from \"../../users.json\";\nimport replies from \"../../replies.json\";\n\nfunction Cards() {\n  // const { users, setUsers } = useContext(context);\n\n  // useEffect(() => {\n  //   getUsers();\n  // }, []);\n  // const getUsers = async () => {\n  //   try {\n  //     const response = await fetch(\"http://localhost:3001/users\");\n  //     const data = await response.json();\n  //     setUsers(data);\n  //   } catch (err) {\n  //     console.log(err);\n  //   }\n  // };\n  return (\n    <div>\n      {/* {users && (\n        <>\n          {users.users.map((user) => (\n            <Card\n              key={user.id}\n              users={users}\n              message={user.message}\n              first_name={user.first_name}\n              last_name={user.last_name}\n              email={user.email}\n              photo={user.photo}\n            />\n          ))}\n        </>\n      )} */}\n\n      {users && (\n        <>\n          {users.map((user) => (\n            <Card\n              id={user.id}\n              replies={replies}\n              key={user.id}\n              users={users}\n              message={user.message}\n              first_name={user.first_name}\n              last_name={user.last_name}\n              email={user.email}\n              photo={user.photo}\n              likes={user.likes}\n            />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Cards;\n","import React from \"react\";\nimport \"./header.css\";\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <nav className=\"navigation\">\n        <img\n          className=\"logo-img\"\n          src=\"https://www.booksloth.com/a/i/logo.png\"\n          alt=\"book sloth logo\"\n        />\n\n        <ul className=\"social-links\">\n          <li className=\"social-item\">\n            <a\n              className=\"social-link\"\n              href=\"https://www.facebook.com/booksloth/\"\n            >\n              <i className=\"fab fa-facebook-f\"></i>\n            </a>\n          </li>\n          <li className=\"social-item\">\n            <a\n              className=\"social-link\"\n              href=\"https://www.instagram.com/bookslothapp/?hl=en\"\n            >\n              <i className=\"fab fa-instagram\"></i>\n            </a>\n          </li>\n          <li className=\"social-item\">\n            <a\n              className=\"social-link\"\n              href=\"https://twitter.com/bookslothapp?lang=en\"\n            >\n              <i className=\"fab fa-twitter\"></i>\n            </a>\n          </li>\n        </ul>\n      </nav>\n      <h1 className=\"header-title\">Community</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport Cards from \"./components/Cards\";\nimport Header from \"./components/Header\";\nimport \"./style.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Cards />\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from \"react\";\nconst context = React.createContext();\n\nfunction ContextProvider({ children }) {\n  const [users, setUsers] = useState();\n\n  return (\n    <context.Provider value={{ users, setUsers }}>{children}</context.Provider>\n  );\n}\n\nexport { ContextProvider, context };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ContextProvider } from \"./components/context/index\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <ContextProvider>\n    <App />\n  </ContextProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}